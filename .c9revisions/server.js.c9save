{"ts":1372493899179,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module.exports.conf = require('./conf/conf');\nvar domain = require('domain'),\n    http = require('http'),\n    fs = require('fs'),\n    path = require('path'),\n    zlib = require('zlib');\nvar serverDm = domain.create();\nvar processPath = path.dirname(process.argv[1]);\nglobal.yRead = {};\nyRead.version = '0.0.1';\n\nserverDm.on('error', function (err) {\n    delete err.domain;\n    yRead.errlog.error(err);\n});\nserverDm.run(function() {\n    yRead.conf = module.exports.conf = require('./conf/conf');\n    yRead.module = {};\n    yRead.module.rrestjs = require('rrestjs');\n    yRead.module.mongoskin = require('mongoskin');\n/*    yRead.module.marked = require('marked');\n    yRead.module.nodemailer = require('nodemailer');*/\n    yRead.errlog = yRead.module.rrestjs.restlog;\n    yRead.lib = {};\n    yRead.lib.tools = require('./lib/tools.js');\n    yRead.lib.CacheLRU = require('./lib/cacheLRU.js');\n    yRead.lib.CacheTL = require('./lib/cacheTL.js');\n    yRead.lib.msg = require('./lib/msg.js');\n    yRead.lib.model = require('./lib/model.js');\n    yRead.lib.converter = require('./lib/anyBaseConverter.js');\n    yRead.lib.email = require('./lib/email.js');\n    yRead.dao = {};\n    yRead.dao.db = require('./dao/mongoDao.js').db;\n    yRead.dao.articleDao = require('./dao/articleDao.js');\n    yRead.dao.bookDao = require('./dao/bookDao.js');\n    yRead.cache = {};\n    yRead.api = {};\n    yRead.api.book = require('./api/book.js');\n    yRead.api.art = require('./api/article.js');\n    yRead.api.dir = require('./api/directory.js');\n    creatServer();\n});\n\nfunction creatServer() {\n    var server = http.createServer(function(req, res) {\n        var dm = domain.create();\n        dm.on('error', function (err) {\n            console.log(err);\n            delete err.domain;\n            err.type = 'error';\n            try {\n                res.on('finish', function () {\n                    //yRead.dao.db.close();\n                    process.nextTick(function () {\n                        dm.dispose();\n                    });\n                });\n                if (err.hasOwnProperty('name')) {\n                    res.sendjson({\n                        err: err\n                    });\n                } else {\n                    //console.log('ReqErr:******************');\n                    console.log(req.session + ':' + req.method + ':' + req.path);\n                    yRead.errlog.error(err);\n                    res.sendjson({\n                        err: {\n                            name: 'Request Error',\n                            message: 'Sorryï¼ŒRequest Error!',\n                            type: 'error',\n                            url: '/'\n                        }\n                    });\n                }\n            } catch (err) {\n                delete err.domain;\n                //console.log('CatchERR:******************');\n                yRead.errlog.error(err);\n                dm.dispose();\n            }\n        });\n        dm.run(function () {\n            if (req.path[0] === 'api' && yRead.api[req.path[1]]) {\n                yRead.api[req.path[1]][req.method.toUpperCase()](req, res, dm);\n            } else {\n                res.setHeader(\"Content-Type\", \"text/html\");\n                if (yRead.indexTpl) {\n                    res.send(yRead.indexTpl);\n                } else {\n                    fs.readFile(processPath + '/web/index.html', 'utf8', serverDm.intercept(function (data) {\n                    //    yRead.indexTpl = data;\n                        res.send(data);\n                    }));\n                }\n            }//yRead.module.rrestjs.config.listenPort\n        });//process.env.PORT\n    }).listen(process.env.PORT);\n};"]],"start1":0,"start2":0,"length1":0,"length2":3671}]],"length":3671}
